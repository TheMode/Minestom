package net.minestom.code_generation.particle;

import com.google.gson.*;
import com.google.gson.stream.JsonReader;
import com.squareup.javapoet.*;
import net.minestom.code_generation.MinestomCodeGenerator;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.lang.model.element.Modifier;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.*;
import java.util.function.BiFunction;

public final class ParticleTypeGenerator extends MinestomCodeGenerator {
    private static final Logger LOGGER = LoggerFactory.getLogger(ParticleTypeGenerator.class);
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().disableHtmlEscaping().create();
    private static final File DEFAULT_INPUT_FILE = new File(DEFAULT_SOURCE_FOLDER_ROOT, "particles.json");
    private final File particlesFile;
    private final File outputFolder;

    private static final Map<String, String> PARTICLE_DATA = new HashMap<>() {{
        put("BLOCK", "BlockParticle");
        put("FALLING_DUST", "BlockParticle");
        put("DUST", "DustParticle");
        put("ITEM", "ItemParticle");
    }};

    public ParticleTypeGenerator() {
        this(null, null);
    }

    public ParticleTypeGenerator(@Nullable File particlesFile) {
        this(particlesFile, null);
    }

    public ParticleTypeGenerator(@Nullable File particlesFile, @Nullable File outputFolder) {
        this.particlesFile = Objects.requireNonNullElse(particlesFile, DEFAULT_INPUT_FILE);
        this.outputFolder = Objects.requireNonNullElse(outputFolder, DEFAULT_OUTPUT_FOLDER);
    }

    @Override
    public void generate() {
        if (!particlesFile.exists()) {
            LOGGER.error("Failed to find particles.json.");
            LOGGER.error("Stopped code generation for particles.");
            return;
        }
        if (!outputFolder.exists() && !outputFolder.mkdirs()) {
            LOGGER.error("Output folder for code generation does not exist and could not be created.");
            return;
        }
        // Important classes we use alot
        ClassName namespaceIDClassName = ClassName.get("net.minestom.server.utils", "NamespaceID");
        ClassName registryClassName = ClassName.get("net.minestom.server.registry", "Registry");

        JsonArray particles;
        try {
            particles = GSON.fromJson(new JsonReader(new FileReader(particlesFile)), JsonArray.class);
        } catch (FileNotFoundException e) {
            LOGGER.error("Failed to find particles.json.");
            LOGGER.error("Stopped code generation for particles.");
            return;
        }
        ClassName particleTypeClassName = ClassName.get("net.minestom.server.particle", "ParticleType");
        ClassName particleClassName = ClassName.get("net.minestom.server.particle.data", "Particle");

        // Type variable (Particle)
        TypeVariableName typeVariable = TypeVariableName.get("T", particleClassName);

        // BiFunction<ParticleType<T>, @Nullable String, T>
        ParameterizedTypeName dataReaderType = ParameterizedTypeName.get(
                ClassName.get(BiFunction.class), ParameterizedTypeName.get(particleTypeClassName, typeVariable),
                TypeName.get(String.class).annotated(AnnotationSpec.builder(Nullable.class).build()), typeVariable
        );

        // ParticleType<?>
        ParameterizedTypeName wildcardParticle = ParameterizedTypeName.get(particleTypeClassName, WildcardTypeName.subtypeOf(Object.class));

        // ParticleType
        TypeSpec.Builder particleClass = TypeSpec.classBuilder(particleTypeClassName)
                .addTypeVariable(typeVariable)
                .addSuperinterface(ClassName.get("net.kyori.adventure.key", "Keyed"))
                .addModifiers(Modifier.PUBLIC).addJavadoc("AUTOGENERATED by " + getClass().getSimpleName());
        particleClass.addField(
                FieldSpec.builder(namespaceIDClassName, "id")
                        .addModifiers(Modifier.PRIVATE, Modifier.FINAL).addAnnotation(NotNull.class).build()
        );
        particleClass.addField(
                FieldSpec.builder(dataReaderType, "dataReader")
                        .addModifiers(Modifier.PRIVATE, Modifier.FINAL).addAnnotation(NotNull.class).build()
        );
        // ParticleType(NamespaceID, BiFunction<Particle<T>, String, T>)
        particleClass.addMethod(
                MethodSpec.constructorBuilder()
                        .addParameter(ParameterSpec.builder(namespaceIDClassName, "id").addAnnotation(NotNull.class).build())
                        .addParameter(ParameterSpec.builder(dataReaderType, "dataReader").addAnnotation(NotNull.class).build())
                        .addStatement("this.id = id")
                        .addStatement("this.dataReader = dataReader")
                        .addModifiers(Modifier.PROTECTED)
                        .build()
        );
        // Override key method (adventure)
        particleClass.addMethod(
                MethodSpec.methodBuilder("key")
                        .returns(ClassName.get("net.kyori.adventure.key", "Key"))
                        .addAnnotation(Override.class)
                        .addAnnotation(NotNull.class)
                        .addStatement("return this.id")
                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );
        // getId method
        particleClass.addMethod(
                MethodSpec.methodBuilder("getId")
                        .returns(namespaceIDClassName)
                        .addAnnotation(NotNull.class)
                        .addStatement("return this.id")
                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );
        // readData method
        particleClass.addMethod(
                MethodSpec.methodBuilder("readData")
                        .returns(typeVariable)
                        .addAnnotation(Nullable.class)
                        .addParameter(ParameterSpec.builder(String.class, "data").addAnnotation(Nullable.class).build())
                        .addStatement("return this.dataReader.apply(this, data)")
                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );
        // getNumericalId
        particleClass.addMethod(
                MethodSpec.methodBuilder("getNumericalId")
                        .returns(TypeName.INT)
                        .addStatement("return $T.PARTICLE_REGISTRY.getId(this)", registryClassName)
                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );
        // fromId Method
        particleClass.addMethod(
                MethodSpec.methodBuilder("fromId")
                        .returns(wildcardParticle)
                        .addAnnotation(Nullable.class)
                        .addParameter(TypeName.INT, "id")
                        .addStatement("return $T.PARTICLE_REGISTRY.get((short) id)", registryClassName)
                        .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                        .build()
        );
        // fromId Method
        particleClass.addMethod(
                MethodSpec.methodBuilder("fromId")
                        .returns(wildcardParticle)
                        .addAnnotation(NotNull.class)
                        .addParameter(ClassName.get("net.kyori.adventure.key", "Key"), "id")
                        .addStatement("return $T.PARTICLE_REGISTRY.get(id)", registryClassName)
                        .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                        .build()
        );
        // toString method
        particleClass.addMethod(
                MethodSpec.methodBuilder("toString")
                        .addAnnotation(NotNull.class)
                        .addAnnotation(Override.class)
                        .returns(String.class)
                        // this resolves to [Namespace]
                        .addStatement("return \"[\" + this.id + \"]\"")
                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );
        // values method
        particleClass.addMethod(
                MethodSpec.methodBuilder("values")
                        .addAnnotation(NotNull.class)
                        .returns(ParameterizedTypeName.get(ClassName.get(List.class), wildcardParticle))
                        .addStatement("return $T.PARTICLE_REGISTRY.values()", registryClassName)
                        .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                        .build()
        );

        // ParticleType<Particle>
        ParameterizedTypeName defaultParticleType = ParameterizedTypeName.get(particleTypeClassName, particleClassName);

        CodeBlock.Builder staticBlock = CodeBlock.builder();
        // Use data
        for (JsonElement p : particles) {
            JsonObject particle = p.getAsJsonObject();
            String particleName = particle.get("name").getAsString();

            String particleDataString = PARTICLE_DATA.get(particleName);

            ClassName currentParticleDataClassName = particleClassName;
            ParameterizedTypeName particleType = defaultParticleType;

            if (particleDataString != null) {
                // Get the ClassName object of current data type
                currentParticleDataClassName = ClassName.get("net.minestom.server.particle.data", particleDataString);

                // Create Particle<datatype>
                particleType = ParameterizedTypeName.get(particleTypeClassName, currentParticleDataClassName);
            }

            particleClass.addField(
                    FieldSpec.builder(
                            particleType,
                            particleName
                    ).initializer(
                            "new $T($T.from($S), $T.READER)",
                            particleType,
                            namespaceIDClassName,
                            particle.get("id").getAsString(),
                            currentParticleDataClassName
                    ).addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL).build()
            );
            // Add to static init.
            staticBlock.addStatement("$T.PARTICLE_REGISTRY.register($N)", registryClassName, particleName);
        }

        particleClass.addStaticBlock(staticBlock.build());

        // Write files to outputFolder
        writeFiles(
                Collections.singletonList(
                        JavaFile.builder("net.minestom.server.particle", particleClass.build())
                                .indent("    ")
                                .skipJavaLangImports(true)
                                .build()
                ),
                outputFolder
        );
    }
}

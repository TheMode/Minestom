package net.minestom.server.item;

import java.util.List;
import net.kyori.adventure.key.Key;
import net.kyori.adventure.key.Keyed;
import net.minestom.server.raw_data.RawEnchantmentData;
import net.minestom.server.registry.Registry;
import net.minestom.server.utils.NamespaceID;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/**
 * AUTOGENERATED by EnchantmentGenerator
 */
public class Enchantment implements Keyed {
    public static final Enchantment ALL_DAMAGE_PROTECTION = new Enchantment(NamespaceID.from("minecraft:protection"), new RawEnchantmentData(4, 1, "COMMON", false, true, true, false, "ARMOR"));

    public static final Enchantment FIRE_PROTECTION = new Enchantment(NamespaceID.from("minecraft:fire_protection"), new RawEnchantmentData(4, 1, "UNCOMMON", false, true, true, false, "ARMOR"));

    public static final Enchantment FALL_PROTECTION = new Enchantment(NamespaceID.from("minecraft:feather_falling"), new RawEnchantmentData(4, 1, "UNCOMMON", false, true, true, false, "ARMOR_FEET"));

    public static final Enchantment BLAST_PROTECTION = new Enchantment(NamespaceID.from("minecraft:blast_protection"), new RawEnchantmentData(4, 1, "RARE", false, true, true, false, "ARMOR"));

    public static final Enchantment PROJECTILE_PROTECTION = new Enchantment(NamespaceID.from("minecraft:projectile_protection"), new RawEnchantmentData(4, 1, "UNCOMMON", false, true, true, false, "ARMOR"));

    public static final Enchantment RESPIRATION = new Enchantment(NamespaceID.from("minecraft:respiration"), new RawEnchantmentData(3, 1, "RARE", false, true, true, false, "ARMOR_HEAD"));

    public static final Enchantment AQUA_AFFINITY = new Enchantment(NamespaceID.from("minecraft:aqua_affinity"), new RawEnchantmentData(1, 1, "RARE", false, true, true, false, "ARMOR_HEAD"));

    public static final Enchantment THORNS = new Enchantment(NamespaceID.from("minecraft:thorns"), new RawEnchantmentData(3, 1, "VERY_RARE", false, true, true, false, "ARMOR_CHEST"));

    public static final Enchantment DEPTH_STRIDER = new Enchantment(NamespaceID.from("minecraft:depth_strider"), new RawEnchantmentData(3, 1, "RARE", false, true, true, false, "ARMOR_FEET"));

    public static final Enchantment FROST_WALKER = new Enchantment(NamespaceID.from("minecraft:frost_walker"), new RawEnchantmentData(2, 1, "RARE", false, true, true, true, "ARMOR_FEET"));

    public static final Enchantment BINDING_CURSE = new Enchantment(NamespaceID.from("minecraft:binding_curse"), new RawEnchantmentData(1, 1, "VERY_RARE", true, true, true, true, "WEARABLE"));

    public static final Enchantment SOUL_SPEED = new Enchantment(NamespaceID.from("minecraft:soul_speed"), new RawEnchantmentData(3, 1, "VERY_RARE", false, false, false, true, "ARMOR_FEET"));

    public static final Enchantment SHARPNESS = new Enchantment(NamespaceID.from("minecraft:sharpness"), new RawEnchantmentData(5, 1, "COMMON", false, true, true, false, "WEAPON"));

    public static final Enchantment SMITE = new Enchantment(NamespaceID.from("minecraft:smite"), new RawEnchantmentData(5, 1, "UNCOMMON", false, true, true, false, "WEAPON"));

    public static final Enchantment BANE_OF_ARTHROPODS = new Enchantment(NamespaceID.from("minecraft:bane_of_arthropods"), new RawEnchantmentData(5, 1, "UNCOMMON", false, true, true, false, "WEAPON"));

    public static final Enchantment KNOCKBACK = new Enchantment(NamespaceID.from("minecraft:knockback"), new RawEnchantmentData(2, 1, "UNCOMMON", false, true, true, false, "WEAPON"));

    public static final Enchantment FIRE_ASPECT = new Enchantment(NamespaceID.from("minecraft:fire_aspect"), new RawEnchantmentData(2, 1, "RARE", false, true, true, false, "WEAPON"));

    public static final Enchantment MOB_LOOTING = new Enchantment(NamespaceID.from("minecraft:looting"), new RawEnchantmentData(3, 1, "RARE", false, true, true, false, "WEAPON"));

    public static final Enchantment SWEEPING_EDGE = new Enchantment(NamespaceID.from("minecraft:sweeping"), new RawEnchantmentData(3, 1, "RARE", false, true, true, false, "WEAPON"));

    public static final Enchantment BLOCK_EFFICIENCY = new Enchantment(NamespaceID.from("minecraft:efficiency"), new RawEnchantmentData(5, 1, "COMMON", false, true, true, false, "DIGGER"));

    public static final Enchantment SILK_TOUCH = new Enchantment(NamespaceID.from("minecraft:silk_touch"), new RawEnchantmentData(1, 1, "VERY_RARE", false, true, true, false, "DIGGER"));

    public static final Enchantment UNBREAKING = new Enchantment(NamespaceID.from("minecraft:unbreaking"), new RawEnchantmentData(3, 1, "UNCOMMON", false, true, true, false, "BREAKABLE"));

    public static final Enchantment BLOCK_FORTUNE = new Enchantment(NamespaceID.from("minecraft:fortune"), new RawEnchantmentData(3, 1, "RARE", false, true, true, false, "DIGGER"));

    public static final Enchantment POWER_ARROWS = new Enchantment(NamespaceID.from("minecraft:power"), new RawEnchantmentData(5, 1, "COMMON", false, true, true, false, "BOW"));

    public static final Enchantment PUNCH_ARROWS = new Enchantment(NamespaceID.from("minecraft:punch"), new RawEnchantmentData(2, 1, "RARE", false, true, true, false, "BOW"));

    public static final Enchantment FLAMING_ARROWS = new Enchantment(NamespaceID.from("minecraft:flame"), new RawEnchantmentData(1, 1, "RARE", false, true, true, false, "BOW"));

    public static final Enchantment INFINITY_ARROWS = new Enchantment(NamespaceID.from("minecraft:infinity"), new RawEnchantmentData(1, 1, "VERY_RARE", false, true, true, false, "BOW"));

    public static final Enchantment FISHING_LUCK = new Enchantment(NamespaceID.from("minecraft:luck_of_the_sea"), new RawEnchantmentData(3, 1, "RARE", false, true, true, false, "FISHING_ROD"));

    public static final Enchantment FISHING_SPEED = new Enchantment(NamespaceID.from("minecraft:lure"), new RawEnchantmentData(3, 1, "RARE", false, true, true, false, "FISHING_ROD"));

    public static final Enchantment LOYALTY = new Enchantment(NamespaceID.from("minecraft:loyalty"), new RawEnchantmentData(3, 1, "UNCOMMON", false, true, true, false, "TRIDENT"));

    public static final Enchantment IMPALING = new Enchantment(NamespaceID.from("minecraft:impaling"), new RawEnchantmentData(5, 1, "RARE", false, true, true, false, "TRIDENT"));

    public static final Enchantment RIPTIDE = new Enchantment(NamespaceID.from("minecraft:riptide"), new RawEnchantmentData(3, 1, "RARE", false, true, true, false, "TRIDENT"));

    public static final Enchantment CHANNELING = new Enchantment(NamespaceID.from("minecraft:channeling"), new RawEnchantmentData(1, 1, "VERY_RARE", false, true, true, false, "TRIDENT"));

    public static final Enchantment MULTISHOT = new Enchantment(NamespaceID.from("minecraft:multishot"), new RawEnchantmentData(1, 1, "RARE", false, true, true, false, "CROSSBOW"));

    public static final Enchantment QUICK_CHARGE = new Enchantment(NamespaceID.from("minecraft:quick_charge"), new RawEnchantmentData(3, 1, "UNCOMMON", false, true, true, false, "CROSSBOW"));

    public static final Enchantment PIERCING = new Enchantment(NamespaceID.from("minecraft:piercing"), new RawEnchantmentData(4, 1, "COMMON", false, true, true, false, "CROSSBOW"));

    public static final Enchantment MENDING = new Enchantment(NamespaceID.from("minecraft:mending"), new RawEnchantmentData(1, 1, "RARE", false, true, true, true, "BREAKABLE"));

    public static final Enchantment VANISHING_CURSE = new Enchantment(NamespaceID.from("minecraft:vanishing_curse"), new RawEnchantmentData(1, 1, "VERY_RARE", true, true, true, true, "VANISHABLE"));

    static {
        Registry.ENCHANTMENT_REGISTRY.register(ALL_DAMAGE_PROTECTION);
        Registry.ENCHANTMENT_REGISTRY.register(FIRE_PROTECTION);
        Registry.ENCHANTMENT_REGISTRY.register(FALL_PROTECTION);
        Registry.ENCHANTMENT_REGISTRY.register(BLAST_PROTECTION);
        Registry.ENCHANTMENT_REGISTRY.register(PROJECTILE_PROTECTION);
        Registry.ENCHANTMENT_REGISTRY.register(RESPIRATION);
        Registry.ENCHANTMENT_REGISTRY.register(AQUA_AFFINITY);
        Registry.ENCHANTMENT_REGISTRY.register(THORNS);
        Registry.ENCHANTMENT_REGISTRY.register(DEPTH_STRIDER);
        Registry.ENCHANTMENT_REGISTRY.register(FROST_WALKER);
        Registry.ENCHANTMENT_REGISTRY.register(BINDING_CURSE);
        Registry.ENCHANTMENT_REGISTRY.register(SOUL_SPEED);
        Registry.ENCHANTMENT_REGISTRY.register(SHARPNESS);
        Registry.ENCHANTMENT_REGISTRY.register(SMITE);
        Registry.ENCHANTMENT_REGISTRY.register(BANE_OF_ARTHROPODS);
        Registry.ENCHANTMENT_REGISTRY.register(KNOCKBACK);
        Registry.ENCHANTMENT_REGISTRY.register(FIRE_ASPECT);
        Registry.ENCHANTMENT_REGISTRY.register(MOB_LOOTING);
        Registry.ENCHANTMENT_REGISTRY.register(SWEEPING_EDGE);
        Registry.ENCHANTMENT_REGISTRY.register(BLOCK_EFFICIENCY);
        Registry.ENCHANTMENT_REGISTRY.register(SILK_TOUCH);
        Registry.ENCHANTMENT_REGISTRY.register(UNBREAKING);
        Registry.ENCHANTMENT_REGISTRY.register(BLOCK_FORTUNE);
        Registry.ENCHANTMENT_REGISTRY.register(POWER_ARROWS);
        Registry.ENCHANTMENT_REGISTRY.register(PUNCH_ARROWS);
        Registry.ENCHANTMENT_REGISTRY.register(FLAMING_ARROWS);
        Registry.ENCHANTMENT_REGISTRY.register(INFINITY_ARROWS);
        Registry.ENCHANTMENT_REGISTRY.register(FISHING_LUCK);
        Registry.ENCHANTMENT_REGISTRY.register(FISHING_SPEED);
        Registry.ENCHANTMENT_REGISTRY.register(LOYALTY);
        Registry.ENCHANTMENT_REGISTRY.register(IMPALING);
        Registry.ENCHANTMENT_REGISTRY.register(RIPTIDE);
        Registry.ENCHANTMENT_REGISTRY.register(CHANNELING);
        Registry.ENCHANTMENT_REGISTRY.register(MULTISHOT);
        Registry.ENCHANTMENT_REGISTRY.register(QUICK_CHARGE);
        Registry.ENCHANTMENT_REGISTRY.register(PIERCING);
        Registry.ENCHANTMENT_REGISTRY.register(MENDING);
        Registry.ENCHANTMENT_REGISTRY.register(VANISHING_CURSE);
    }

    @NotNull
    private final NamespaceID id;

    @NotNull
    private volatile RawEnchantmentData enchantmentData;

    protected Enchantment(@NotNull NamespaceID id, @NotNull RawEnchantmentData enchantmentData) {
        this.id = id;
        this.enchantmentData = enchantmentData;
    }

    @Override
    @NotNull
    public Key key() {
        return this.id;
    }

    @NotNull
    public NamespaceID getId() {
        return this.id;
    }

    public int getNumericalId() {
        return Registry.ENCHANTMENT_REGISTRY.getId(this);
    }

    @Nullable
    public static Enchantment fromId(int id) {
        return Registry.ENCHANTMENT_REGISTRY.get((short) id);
    }

    @NotNull
    public static Enchantment fromId(Key id) {
        return Registry.ENCHANTMENT_REGISTRY.get(id);
    }

    @NotNull
    public final RawEnchantmentData getEnchantmentData() {
        return this.enchantmentData;
    }

    public final void setEnchantmentData(@NotNull RawEnchantmentData enchantmentData) {
        this.enchantmentData = enchantmentData;
    }

    @NotNull
    @Override
    public String toString() {
        return "[" + this.id + "]";
    }

    @NotNull
    public static List<Enchantment> values() {
        return Registry.ENCHANTMENT_REGISTRY.values();
    }
}

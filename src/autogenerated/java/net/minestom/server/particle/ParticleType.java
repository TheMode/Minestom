package net.minestom.server.particle;

import net.kyori.adventure.key.Key;
import net.kyori.adventure.key.Keyed;
import net.minestom.server.particle.data.BlockParticle;
import net.minestom.server.particle.data.DustParticle;
import net.minestom.server.particle.data.ItemParticle;
import net.minestom.server.particle.data.Particle;
import net.minestom.server.registry.Registry;
import net.minestom.server.utils.NamespaceID;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.List;
import java.util.function.BiFunction;

/**
 * AUTOGENERATED by ParticleTypeGenerator
 */
public class ParticleType<T extends Particle> implements Keyed {
    public static final ParticleType<Particle> AMBIENT_ENTITY_EFFECT = new ParticleType<Particle>(NamespaceID.from("minecraft:ambient_entity_effect"), Particle.READER);

    public static final ParticleType<Particle> ANGRY_VILLAGER = new ParticleType<Particle>(NamespaceID.from("minecraft:angry_villager"), Particle.READER);

    public static final ParticleType<Particle> BARRIER = new ParticleType<Particle>(NamespaceID.from("minecraft:barrier"), Particle.READER);

    public static final ParticleType<BlockParticle> BLOCK = new ParticleType<BlockParticle>(NamespaceID.from("minecraft:block"), BlockParticle.READER);

    public static final ParticleType<Particle> BUBBLE = new ParticleType<Particle>(NamespaceID.from("minecraft:bubble"), Particle.READER);

    public static final ParticleType<Particle> CLOUD = new ParticleType<Particle>(NamespaceID.from("minecraft:cloud"), Particle.READER);

    public static final ParticleType<Particle> CRIT = new ParticleType<Particle>(NamespaceID.from("minecraft:crit"), Particle.READER);

    public static final ParticleType<Particle> DAMAGE_INDICATOR = new ParticleType<Particle>(NamespaceID.from("minecraft:damage_indicator"), Particle.READER);

    public static final ParticleType<Particle> DRAGON_BREATH = new ParticleType<Particle>(NamespaceID.from("minecraft:dragon_breath"), Particle.READER);

    public static final ParticleType<Particle> DRIPPING_LAVA = new ParticleType<Particle>(NamespaceID.from("minecraft:dripping_lava"), Particle.READER);

    public static final ParticleType<Particle> FALLING_LAVA = new ParticleType<Particle>(NamespaceID.from("minecraft:falling_lava"), Particle.READER);

    public static final ParticleType<Particle> LANDING_LAVA = new ParticleType<Particle>(NamespaceID.from("minecraft:landing_lava"), Particle.READER);

    public static final ParticleType<Particle> DRIPPING_WATER = new ParticleType<Particle>(NamespaceID.from("minecraft:dripping_water"), Particle.READER);

    public static final ParticleType<Particle> FALLING_WATER = new ParticleType<Particle>(NamespaceID.from("minecraft:falling_water"), Particle.READER);

    public static final ParticleType<DustParticle> DUST = new ParticleType<DustParticle>(NamespaceID.from("minecraft:dust"), DustParticle.READER);

    public static final ParticleType<Particle> EFFECT = new ParticleType<Particle>(NamespaceID.from("minecraft:effect"), Particle.READER);

    public static final ParticleType<Particle> ELDER_GUARDIAN = new ParticleType<Particle>(NamespaceID.from("minecraft:elder_guardian"), Particle.READER);

    public static final ParticleType<Particle> ENCHANTED_HIT = new ParticleType<Particle>(NamespaceID.from("minecraft:enchanted_hit"), Particle.READER);

    public static final ParticleType<Particle> ENCHANT = new ParticleType<Particle>(NamespaceID.from("minecraft:enchant"), Particle.READER);

    public static final ParticleType<Particle> END_ROD = new ParticleType<Particle>(NamespaceID.from("minecraft:end_rod"), Particle.READER);

    public static final ParticleType<Particle> ENTITY_EFFECT = new ParticleType<Particle>(NamespaceID.from("minecraft:entity_effect"), Particle.READER);

    public static final ParticleType<Particle> EXPLOSION_EMITTER = new ParticleType<Particle>(NamespaceID.from("minecraft:explosion_emitter"), Particle.READER);

    public static final ParticleType<Particle> EXPLOSION = new ParticleType<Particle>(NamespaceID.from("minecraft:explosion"), Particle.READER);

    public static final ParticleType<BlockParticle> FALLING_DUST = new ParticleType<BlockParticle>(NamespaceID.from("minecraft:falling_dust"), BlockParticle.READER);

    public static final ParticleType<Particle> FIREWORK = new ParticleType<Particle>(NamespaceID.from("minecraft:firework"), Particle.READER);

    public static final ParticleType<Particle> FISHING = new ParticleType<Particle>(NamespaceID.from("minecraft:fishing"), Particle.READER);

    public static final ParticleType<Particle> FLAME = new ParticleType<Particle>(NamespaceID.from("minecraft:flame"), Particle.READER);

    public static final ParticleType<Particle> SOUL_FIRE_FLAME = new ParticleType<Particle>(NamespaceID.from("minecraft:soul_fire_flame"), Particle.READER);

    public static final ParticleType<Particle> SOUL = new ParticleType<Particle>(NamespaceID.from("minecraft:soul"), Particle.READER);

    public static final ParticleType<Particle> FLASH = new ParticleType<Particle>(NamespaceID.from("minecraft:flash"), Particle.READER);

    public static final ParticleType<Particle> HAPPY_VILLAGER = new ParticleType<Particle>(NamespaceID.from("minecraft:happy_villager"), Particle.READER);

    public static final ParticleType<Particle> COMPOSTER = new ParticleType<Particle>(NamespaceID.from("minecraft:composter"), Particle.READER);

    public static final ParticleType<Particle> HEART = new ParticleType<Particle>(NamespaceID.from("minecraft:heart"), Particle.READER);

    public static final ParticleType<Particle> INSTANT_EFFECT = new ParticleType<Particle>(NamespaceID.from("minecraft:instant_effect"), Particle.READER);

    public static final ParticleType<ItemParticle> ITEM = new ParticleType<ItemParticle>(NamespaceID.from("minecraft:item"), ItemParticle.READER);

    public static final ParticleType<Particle> ITEM_SLIME = new ParticleType<Particle>(NamespaceID.from("minecraft:item_slime"), Particle.READER);

    public static final ParticleType<Particle> ITEM_SNOWBALL = new ParticleType<Particle>(NamespaceID.from("minecraft:item_snowball"), Particle.READER);

    public static final ParticleType<Particle> LARGE_SMOKE = new ParticleType<Particle>(NamespaceID.from("minecraft:large_smoke"), Particle.READER);

    public static final ParticleType<Particle> LAVA = new ParticleType<Particle>(NamespaceID.from("minecraft:lava"), Particle.READER);

    public static final ParticleType<Particle> MYCELIUM = new ParticleType<Particle>(NamespaceID.from("minecraft:mycelium"), Particle.READER);

    public static final ParticleType<Particle> NOTE = new ParticleType<Particle>(NamespaceID.from("minecraft:note"), Particle.READER);

    public static final ParticleType<Particle> POOF = new ParticleType<Particle>(NamespaceID.from("minecraft:poof"), Particle.READER);

    public static final ParticleType<Particle> PORTAL = new ParticleType<Particle>(NamespaceID.from("minecraft:portal"), Particle.READER);

    public static final ParticleType<Particle> RAIN = new ParticleType<Particle>(NamespaceID.from("minecraft:rain"), Particle.READER);

    public static final ParticleType<Particle> SMOKE = new ParticleType<Particle>(NamespaceID.from("minecraft:smoke"), Particle.READER);

    public static final ParticleType<Particle> SNEEZE = new ParticleType<Particle>(NamespaceID.from("minecraft:sneeze"), Particle.READER);

    public static final ParticleType<Particle> SPIT = new ParticleType<Particle>(NamespaceID.from("minecraft:spit"), Particle.READER);

    public static final ParticleType<Particle> SQUID_INK = new ParticleType<Particle>(NamespaceID.from("minecraft:squid_ink"), Particle.READER);

    public static final ParticleType<Particle> SWEEP_ATTACK = new ParticleType<Particle>(NamespaceID.from("minecraft:sweep_attack"), Particle.READER);

    public static final ParticleType<Particle> TOTEM_OF_UNDYING = new ParticleType<Particle>(NamespaceID.from("minecraft:totem_of_undying"), Particle.READER);

    public static final ParticleType<Particle> UNDERWATER = new ParticleType<Particle>(NamespaceID.from("minecraft:underwater"), Particle.READER);

    public static final ParticleType<Particle> SPLASH = new ParticleType<Particle>(NamespaceID.from("minecraft:splash"), Particle.READER);

    public static final ParticleType<Particle> WITCH = new ParticleType<Particle>(NamespaceID.from("minecraft:witch"), Particle.READER);

    public static final ParticleType<Particle> BUBBLE_POP = new ParticleType<Particle>(NamespaceID.from("minecraft:bubble_pop"), Particle.READER);

    public static final ParticleType<Particle> CURRENT_DOWN = new ParticleType<Particle>(NamespaceID.from("minecraft:current_down"), Particle.READER);

    public static final ParticleType<Particle> BUBBLE_COLUMN_UP = new ParticleType<Particle>(NamespaceID.from("minecraft:bubble_column_up"), Particle.READER);

    public static final ParticleType<Particle> NAUTILUS = new ParticleType<Particle>(NamespaceID.from("minecraft:nautilus"), Particle.READER);

    public static final ParticleType<Particle> DOLPHIN = new ParticleType<Particle>(NamespaceID.from("minecraft:dolphin"), Particle.READER);

    public static final ParticleType<Particle> CAMPFIRE_COSY_SMOKE = new ParticleType<Particle>(NamespaceID.from("minecraft:campfire_cosy_smoke"), Particle.READER);

    public static final ParticleType<Particle> CAMPFIRE_SIGNAL_SMOKE = new ParticleType<Particle>(NamespaceID.from("minecraft:campfire_signal_smoke"), Particle.READER);

    public static final ParticleType<Particle> DRIPPING_HONEY = new ParticleType<Particle>(NamespaceID.from("minecraft:dripping_honey"), Particle.READER);

    public static final ParticleType<Particle> FALLING_HONEY = new ParticleType<Particle>(NamespaceID.from("minecraft:falling_honey"), Particle.READER);

    public static final ParticleType<Particle> LANDING_HONEY = new ParticleType<Particle>(NamespaceID.from("minecraft:landing_honey"), Particle.READER);

    public static final ParticleType<Particle> FALLING_NECTAR = new ParticleType<Particle>(NamespaceID.from("minecraft:falling_nectar"), Particle.READER);

    public static final ParticleType<Particle> ASH = new ParticleType<Particle>(NamespaceID.from("minecraft:ash"), Particle.READER);

    public static final ParticleType<Particle> CRIMSON_SPORE = new ParticleType<Particle>(NamespaceID.from("minecraft:crimson_spore"), Particle.READER);

    public static final ParticleType<Particle> WARPED_SPORE = new ParticleType<Particle>(NamespaceID.from("minecraft:warped_spore"), Particle.READER);

    public static final ParticleType<Particle> DRIPPING_OBSIDIAN_TEAR = new ParticleType<Particle>(NamespaceID.from("minecraft:dripping_obsidian_tear"), Particle.READER);

    public static final ParticleType<Particle> FALLING_OBSIDIAN_TEAR = new ParticleType<Particle>(NamespaceID.from("minecraft:falling_obsidian_tear"), Particle.READER);

    public static final ParticleType<Particle> LANDING_OBSIDIAN_TEAR = new ParticleType<Particle>(NamespaceID.from("minecraft:landing_obsidian_tear"), Particle.READER);

    public static final ParticleType<Particle> REVERSE_PORTAL = new ParticleType<Particle>(NamespaceID.from("minecraft:reverse_portal"), Particle.READER);

    public static final ParticleType<Particle> WHITE_ASH = new ParticleType<Particle>(NamespaceID.from("minecraft:white_ash"), Particle.READER);

    static {
        Registry.PARTICLE_REGISTRY.register(AMBIENT_ENTITY_EFFECT);
        Registry.PARTICLE_REGISTRY.register(ANGRY_VILLAGER);
        Registry.PARTICLE_REGISTRY.register(BARRIER);
        Registry.PARTICLE_REGISTRY.register(BLOCK);
        Registry.PARTICLE_REGISTRY.register(BUBBLE);
        Registry.PARTICLE_REGISTRY.register(CLOUD);
        Registry.PARTICLE_REGISTRY.register(CRIT);
        Registry.PARTICLE_REGISTRY.register(DAMAGE_INDICATOR);
        Registry.PARTICLE_REGISTRY.register(DRAGON_BREATH);
        Registry.PARTICLE_REGISTRY.register(DRIPPING_LAVA);
        Registry.PARTICLE_REGISTRY.register(FALLING_LAVA);
        Registry.PARTICLE_REGISTRY.register(LANDING_LAVA);
        Registry.PARTICLE_REGISTRY.register(DRIPPING_WATER);
        Registry.PARTICLE_REGISTRY.register(FALLING_WATER);
        Registry.PARTICLE_REGISTRY.register(DUST);
        Registry.PARTICLE_REGISTRY.register(EFFECT);
        Registry.PARTICLE_REGISTRY.register(ELDER_GUARDIAN);
        Registry.PARTICLE_REGISTRY.register(ENCHANTED_HIT);
        Registry.PARTICLE_REGISTRY.register(ENCHANT);
        Registry.PARTICLE_REGISTRY.register(END_ROD);
        Registry.PARTICLE_REGISTRY.register(ENTITY_EFFECT);
        Registry.PARTICLE_REGISTRY.register(EXPLOSION_EMITTER);
        Registry.PARTICLE_REGISTRY.register(EXPLOSION);
        Registry.PARTICLE_REGISTRY.register(FALLING_DUST);
        Registry.PARTICLE_REGISTRY.register(FIREWORK);
        Registry.PARTICLE_REGISTRY.register(FISHING);
        Registry.PARTICLE_REGISTRY.register(FLAME);
        Registry.PARTICLE_REGISTRY.register(SOUL_FIRE_FLAME);
        Registry.PARTICLE_REGISTRY.register(SOUL);
        Registry.PARTICLE_REGISTRY.register(FLASH);
        Registry.PARTICLE_REGISTRY.register(HAPPY_VILLAGER);
        Registry.PARTICLE_REGISTRY.register(COMPOSTER);
        Registry.PARTICLE_REGISTRY.register(HEART);
        Registry.PARTICLE_REGISTRY.register(INSTANT_EFFECT);
        Registry.PARTICLE_REGISTRY.register(ITEM);
        Registry.PARTICLE_REGISTRY.register(ITEM_SLIME);
        Registry.PARTICLE_REGISTRY.register(ITEM_SNOWBALL);
        Registry.PARTICLE_REGISTRY.register(LARGE_SMOKE);
        Registry.PARTICLE_REGISTRY.register(LAVA);
        Registry.PARTICLE_REGISTRY.register(MYCELIUM);
        Registry.PARTICLE_REGISTRY.register(NOTE);
        Registry.PARTICLE_REGISTRY.register(POOF);
        Registry.PARTICLE_REGISTRY.register(PORTAL);
        Registry.PARTICLE_REGISTRY.register(RAIN);
        Registry.PARTICLE_REGISTRY.register(SMOKE);
        Registry.PARTICLE_REGISTRY.register(SNEEZE);
        Registry.PARTICLE_REGISTRY.register(SPIT);
        Registry.PARTICLE_REGISTRY.register(SQUID_INK);
        Registry.PARTICLE_REGISTRY.register(SWEEP_ATTACK);
        Registry.PARTICLE_REGISTRY.register(TOTEM_OF_UNDYING);
        Registry.PARTICLE_REGISTRY.register(UNDERWATER);
        Registry.PARTICLE_REGISTRY.register(SPLASH);
        Registry.PARTICLE_REGISTRY.register(WITCH);
        Registry.PARTICLE_REGISTRY.register(BUBBLE_POP);
        Registry.PARTICLE_REGISTRY.register(CURRENT_DOWN);
        Registry.PARTICLE_REGISTRY.register(BUBBLE_COLUMN_UP);
        Registry.PARTICLE_REGISTRY.register(NAUTILUS);
        Registry.PARTICLE_REGISTRY.register(DOLPHIN);
        Registry.PARTICLE_REGISTRY.register(CAMPFIRE_COSY_SMOKE);
        Registry.PARTICLE_REGISTRY.register(CAMPFIRE_SIGNAL_SMOKE);
        Registry.PARTICLE_REGISTRY.register(DRIPPING_HONEY);
        Registry.PARTICLE_REGISTRY.register(FALLING_HONEY);
        Registry.PARTICLE_REGISTRY.register(LANDING_HONEY);
        Registry.PARTICLE_REGISTRY.register(FALLING_NECTAR);
        Registry.PARTICLE_REGISTRY.register(ASH);
        Registry.PARTICLE_REGISTRY.register(CRIMSON_SPORE);
        Registry.PARTICLE_REGISTRY.register(WARPED_SPORE);
        Registry.PARTICLE_REGISTRY.register(DRIPPING_OBSIDIAN_TEAR);
        Registry.PARTICLE_REGISTRY.register(FALLING_OBSIDIAN_TEAR);
        Registry.PARTICLE_REGISTRY.register(LANDING_OBSIDIAN_TEAR);
        Registry.PARTICLE_REGISTRY.register(REVERSE_PORTAL);
        Registry.PARTICLE_REGISTRY.register(WHITE_ASH);
    }

    @NotNull
    private final NamespaceID id;

    @NotNull
    private final BiFunction<ParticleType<T>, @Nullable String, T> dataReader;

    protected ParticleType(@NotNull NamespaceID id,
            @NotNull BiFunction<ParticleType<T>, @Nullable String, T> dataReader) {
        this.id = id;
        this.dataReader = dataReader;
    }

    @Override
    @NotNull
    public Key key() {
        return this.id;
    }

    @NotNull
    public NamespaceID getId() {
        return this.id;
    }

    @Nullable
    public T readData(@Nullable String data) {
        return this.dataReader.apply(this, data);
    }

    public int getNumericalId() {
        return Registry.PARTICLE_REGISTRY.getId(this);
    }

    @Nullable
    public static ParticleType<?> fromId(int id) {
        return Registry.PARTICLE_REGISTRY.get((short) id);
    }

    @NotNull
    public static ParticleType<?> fromId(Key id) {
        return Registry.PARTICLE_REGISTRY.get(id);
    }

    @NotNull
    @Override
    public String toString() {
        return "[" + this.id + "]";
    }

    @NotNull
    public static List<ParticleType<?>> values() {
        return Registry.PARTICLE_REGISTRY.values();
    }
}

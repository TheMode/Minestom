package net.minestom.server.particle;

import java.util.List;
import net.kyori.adventure.key.Key;
import net.kyori.adventure.key.Keyed;
import net.minestom.server.registry.Registry;
import net.minestom.server.utils.NamespaceID;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/**
 * AUTOGENERATED by ParticleGenerator
 */
public class Particle implements Keyed {
    public static final Particle AMBIENT_ENTITY_EFFECT = new Particle(NamespaceID.from("minecraft:ambient_entity_effect"));

    public static final Particle ANGRY_VILLAGER = new Particle(NamespaceID.from("minecraft:angry_villager"));

    public static final Particle BARRIER = new Particle(NamespaceID.from("minecraft:barrier"));

    public static final Particle BLOCK = new Particle(NamespaceID.from("minecraft:block"));

    public static final Particle BUBBLE = new Particle(NamespaceID.from("minecraft:bubble"));

    public static final Particle CLOUD = new Particle(NamespaceID.from("minecraft:cloud"));

    public static final Particle CRIT = new Particle(NamespaceID.from("minecraft:crit"));

    public static final Particle DAMAGE_INDICATOR = new Particle(NamespaceID.from("minecraft:damage_indicator"));

    public static final Particle DRAGON_BREATH = new Particle(NamespaceID.from("minecraft:dragon_breath"));

    public static final Particle DRIPPING_LAVA = new Particle(NamespaceID.from("minecraft:dripping_lava"));

    public static final Particle FALLING_LAVA = new Particle(NamespaceID.from("minecraft:falling_lava"));

    public static final Particle LANDING_LAVA = new Particle(NamespaceID.from("minecraft:landing_lava"));

    public static final Particle DRIPPING_WATER = new Particle(NamespaceID.from("minecraft:dripping_water"));

    public static final Particle FALLING_WATER = new Particle(NamespaceID.from("minecraft:falling_water"));

    public static final Particle DUST = new Particle(NamespaceID.from("minecraft:dust"));

    public static final Particle EFFECT = new Particle(NamespaceID.from("minecraft:effect"));

    public static final Particle ELDER_GUARDIAN = new Particle(NamespaceID.from("minecraft:elder_guardian"));

    public static final Particle ENCHANTED_HIT = new Particle(NamespaceID.from("minecraft:enchanted_hit"));

    public static final Particle ENCHANT = new Particle(NamespaceID.from("minecraft:enchant"));

    public static final Particle END_ROD = new Particle(NamespaceID.from("minecraft:end_rod"));

    public static final Particle ENTITY_EFFECT = new Particle(NamespaceID.from("minecraft:entity_effect"));

    public static final Particle EXPLOSION_EMITTER = new Particle(NamespaceID.from("minecraft:explosion_emitter"));

    public static final Particle EXPLOSION = new Particle(NamespaceID.from("minecraft:explosion"));

    public static final Particle FALLING_DUST = new Particle(NamespaceID.from("minecraft:falling_dust"));

    public static final Particle FIREWORK = new Particle(NamespaceID.from("minecraft:firework"));

    public static final Particle FISHING = new Particle(NamespaceID.from("minecraft:fishing"));

    public static final Particle FLAME = new Particle(NamespaceID.from("minecraft:flame"));

    public static final Particle SOUL_FIRE_FLAME = new Particle(NamespaceID.from("minecraft:soul_fire_flame"));

    public static final Particle SOUL = new Particle(NamespaceID.from("minecraft:soul"));

    public static final Particle FLASH = new Particle(NamespaceID.from("minecraft:flash"));

    public static final Particle HAPPY_VILLAGER = new Particle(NamespaceID.from("minecraft:happy_villager"));

    public static final Particle COMPOSTER = new Particle(NamespaceID.from("minecraft:composter"));

    public static final Particle HEART = new Particle(NamespaceID.from("minecraft:heart"));

    public static final Particle INSTANT_EFFECT = new Particle(NamespaceID.from("minecraft:instant_effect"));

    public static final Particle ITEM = new Particle(NamespaceID.from("minecraft:item"));

    public static final Particle ITEM_SLIME = new Particle(NamespaceID.from("minecraft:item_slime"));

    public static final Particle ITEM_SNOWBALL = new Particle(NamespaceID.from("minecraft:item_snowball"));

    public static final Particle LARGE_SMOKE = new Particle(NamespaceID.from("minecraft:large_smoke"));

    public static final Particle LAVA = new Particle(NamespaceID.from("minecraft:lava"));

    public static final Particle MYCELIUM = new Particle(NamespaceID.from("minecraft:mycelium"));

    public static final Particle NOTE = new Particle(NamespaceID.from("minecraft:note"));

    public static final Particle POOF = new Particle(NamespaceID.from("minecraft:poof"));

    public static final Particle PORTAL = new Particle(NamespaceID.from("minecraft:portal"));

    public static final Particle RAIN = new Particle(NamespaceID.from("minecraft:rain"));

    public static final Particle SMOKE = new Particle(NamespaceID.from("minecraft:smoke"));

    public static final Particle SNEEZE = new Particle(NamespaceID.from("minecraft:sneeze"));

    public static final Particle SPIT = new Particle(NamespaceID.from("minecraft:spit"));

    public static final Particle SQUID_INK = new Particle(NamespaceID.from("minecraft:squid_ink"));

    public static final Particle SWEEP_ATTACK = new Particle(NamespaceID.from("minecraft:sweep_attack"));

    public static final Particle TOTEM_OF_UNDYING = new Particle(NamespaceID.from("minecraft:totem_of_undying"));

    public static final Particle UNDERWATER = new Particle(NamespaceID.from("minecraft:underwater"));

    public static final Particle SPLASH = new Particle(NamespaceID.from("minecraft:splash"));

    public static final Particle WITCH = new Particle(NamespaceID.from("minecraft:witch"));

    public static final Particle BUBBLE_POP = new Particle(NamespaceID.from("minecraft:bubble_pop"));

    public static final Particle CURRENT_DOWN = new Particle(NamespaceID.from("minecraft:current_down"));

    public static final Particle BUBBLE_COLUMN_UP = new Particle(NamespaceID.from("minecraft:bubble_column_up"));

    public static final Particle NAUTILUS = new Particle(NamespaceID.from("minecraft:nautilus"));

    public static final Particle DOLPHIN = new Particle(NamespaceID.from("minecraft:dolphin"));

    public static final Particle CAMPFIRE_COSY_SMOKE = new Particle(NamespaceID.from("minecraft:campfire_cosy_smoke"));

    public static final Particle CAMPFIRE_SIGNAL_SMOKE = new Particle(NamespaceID.from("minecraft:campfire_signal_smoke"));

    public static final Particle DRIPPING_HONEY = new Particle(NamespaceID.from("minecraft:dripping_honey"));

    public static final Particle FALLING_HONEY = new Particle(NamespaceID.from("minecraft:falling_honey"));

    public static final Particle LANDING_HONEY = new Particle(NamespaceID.from("minecraft:landing_honey"));

    public static final Particle FALLING_NECTAR = new Particle(NamespaceID.from("minecraft:falling_nectar"));

    public static final Particle ASH = new Particle(NamespaceID.from("minecraft:ash"));

    public static final Particle CRIMSON_SPORE = new Particle(NamespaceID.from("minecraft:crimson_spore"));

    public static final Particle WARPED_SPORE = new Particle(NamespaceID.from("minecraft:warped_spore"));

    public static final Particle DRIPPING_OBSIDIAN_TEAR = new Particle(NamespaceID.from("minecraft:dripping_obsidian_tear"));

    public static final Particle FALLING_OBSIDIAN_TEAR = new Particle(NamespaceID.from("minecraft:falling_obsidian_tear"));

    public static final Particle LANDING_OBSIDIAN_TEAR = new Particle(NamespaceID.from("minecraft:landing_obsidian_tear"));

    public static final Particle REVERSE_PORTAL = new Particle(NamespaceID.from("minecraft:reverse_portal"));

    public static final Particle WHITE_ASH = new Particle(NamespaceID.from("minecraft:white_ash"));

    static {
        Registry.PARTICLE_REGISTRY.register(AMBIENT_ENTITY_EFFECT);
        Registry.PARTICLE_REGISTRY.register(ANGRY_VILLAGER);
        Registry.PARTICLE_REGISTRY.register(BARRIER);
        Registry.PARTICLE_REGISTRY.register(BLOCK);
        Registry.PARTICLE_REGISTRY.register(BUBBLE);
        Registry.PARTICLE_REGISTRY.register(CLOUD);
        Registry.PARTICLE_REGISTRY.register(CRIT);
        Registry.PARTICLE_REGISTRY.register(DAMAGE_INDICATOR);
        Registry.PARTICLE_REGISTRY.register(DRAGON_BREATH);
        Registry.PARTICLE_REGISTRY.register(DRIPPING_LAVA);
        Registry.PARTICLE_REGISTRY.register(FALLING_LAVA);
        Registry.PARTICLE_REGISTRY.register(LANDING_LAVA);
        Registry.PARTICLE_REGISTRY.register(DRIPPING_WATER);
        Registry.PARTICLE_REGISTRY.register(FALLING_WATER);
        Registry.PARTICLE_REGISTRY.register(DUST);
        Registry.PARTICLE_REGISTRY.register(EFFECT);
        Registry.PARTICLE_REGISTRY.register(ELDER_GUARDIAN);
        Registry.PARTICLE_REGISTRY.register(ENCHANTED_HIT);
        Registry.PARTICLE_REGISTRY.register(ENCHANT);
        Registry.PARTICLE_REGISTRY.register(END_ROD);
        Registry.PARTICLE_REGISTRY.register(ENTITY_EFFECT);
        Registry.PARTICLE_REGISTRY.register(EXPLOSION_EMITTER);
        Registry.PARTICLE_REGISTRY.register(EXPLOSION);
        Registry.PARTICLE_REGISTRY.register(FALLING_DUST);
        Registry.PARTICLE_REGISTRY.register(FIREWORK);
        Registry.PARTICLE_REGISTRY.register(FISHING);
        Registry.PARTICLE_REGISTRY.register(FLAME);
        Registry.PARTICLE_REGISTRY.register(SOUL_FIRE_FLAME);
        Registry.PARTICLE_REGISTRY.register(SOUL);
        Registry.PARTICLE_REGISTRY.register(FLASH);
        Registry.PARTICLE_REGISTRY.register(HAPPY_VILLAGER);
        Registry.PARTICLE_REGISTRY.register(COMPOSTER);
        Registry.PARTICLE_REGISTRY.register(HEART);
        Registry.PARTICLE_REGISTRY.register(INSTANT_EFFECT);
        Registry.PARTICLE_REGISTRY.register(ITEM);
        Registry.PARTICLE_REGISTRY.register(ITEM_SLIME);
        Registry.PARTICLE_REGISTRY.register(ITEM_SNOWBALL);
        Registry.PARTICLE_REGISTRY.register(LARGE_SMOKE);
        Registry.PARTICLE_REGISTRY.register(LAVA);
        Registry.PARTICLE_REGISTRY.register(MYCELIUM);
        Registry.PARTICLE_REGISTRY.register(NOTE);
        Registry.PARTICLE_REGISTRY.register(POOF);
        Registry.PARTICLE_REGISTRY.register(PORTAL);
        Registry.PARTICLE_REGISTRY.register(RAIN);
        Registry.PARTICLE_REGISTRY.register(SMOKE);
        Registry.PARTICLE_REGISTRY.register(SNEEZE);
        Registry.PARTICLE_REGISTRY.register(SPIT);
        Registry.PARTICLE_REGISTRY.register(SQUID_INK);
        Registry.PARTICLE_REGISTRY.register(SWEEP_ATTACK);
        Registry.PARTICLE_REGISTRY.register(TOTEM_OF_UNDYING);
        Registry.PARTICLE_REGISTRY.register(UNDERWATER);
        Registry.PARTICLE_REGISTRY.register(SPLASH);
        Registry.PARTICLE_REGISTRY.register(WITCH);
        Registry.PARTICLE_REGISTRY.register(BUBBLE_POP);
        Registry.PARTICLE_REGISTRY.register(CURRENT_DOWN);
        Registry.PARTICLE_REGISTRY.register(BUBBLE_COLUMN_UP);
        Registry.PARTICLE_REGISTRY.register(NAUTILUS);
        Registry.PARTICLE_REGISTRY.register(DOLPHIN);
        Registry.PARTICLE_REGISTRY.register(CAMPFIRE_COSY_SMOKE);
        Registry.PARTICLE_REGISTRY.register(CAMPFIRE_SIGNAL_SMOKE);
        Registry.PARTICLE_REGISTRY.register(DRIPPING_HONEY);
        Registry.PARTICLE_REGISTRY.register(FALLING_HONEY);
        Registry.PARTICLE_REGISTRY.register(LANDING_HONEY);
        Registry.PARTICLE_REGISTRY.register(FALLING_NECTAR);
        Registry.PARTICLE_REGISTRY.register(ASH);
        Registry.PARTICLE_REGISTRY.register(CRIMSON_SPORE);
        Registry.PARTICLE_REGISTRY.register(WARPED_SPORE);
        Registry.PARTICLE_REGISTRY.register(DRIPPING_OBSIDIAN_TEAR);
        Registry.PARTICLE_REGISTRY.register(FALLING_OBSIDIAN_TEAR);
        Registry.PARTICLE_REGISTRY.register(LANDING_OBSIDIAN_TEAR);
        Registry.PARTICLE_REGISTRY.register(REVERSE_PORTAL);
        Registry.PARTICLE_REGISTRY.register(WHITE_ASH);
    }

    @NotNull
    private final NamespaceID id;

    protected Particle(@NotNull NamespaceID id) {
        this.id = id;
    }

    @Override
    @NotNull
    public Key key() {
        return this.id;
    }

    @NotNull
    public NamespaceID getId() {
        return this.id;
    }

    public int getNumericalId() {
        return Registry.PARTICLE_REGISTRY.getId(this);
    }

    @Nullable
    public static Particle fromId(int id) {
        return Registry.PARTICLE_REGISTRY.get((short) id);
    }

    @NotNull
    public static Particle fromId(Key id) {
        return Registry.PARTICLE_REGISTRY.get(id);
    }

    @NotNull
    @Override
    public String toString() {
        return "[" + this.id + "]";
    }

    @NotNull
    public static List<Particle> values() {
        return Registry.PARTICLE_REGISTRY.values();
    }
}

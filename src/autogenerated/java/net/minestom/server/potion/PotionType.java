package net.minestom.server.potion;

import java.util.List;
import net.kyori.adventure.key.Key;
import net.kyori.adventure.key.Keyed;
import net.minestom.server.registry.Registry;
import net.minestom.server.utils.NamespaceID;
import org.jetbrains.annotations.NotNull;

/**
 * AUTOGENERATED by PotionTypeGenerator
 */
public class PotionType implements Keyed {
    public static final PotionType EMPTY = new PotionType(NamespaceID.from("minecraft:empty"));

    public static final PotionType WATER = new PotionType(NamespaceID.from("minecraft:water"));

    public static final PotionType MUNDANE = new PotionType(NamespaceID.from("minecraft:mundane"));

    public static final PotionType THICK = new PotionType(NamespaceID.from("minecraft:thick"));

    public static final PotionType AWKWARD = new PotionType(NamespaceID.from("minecraft:awkward"));

    public static final PotionType NIGHT_VISION = new PotionType(NamespaceID.from("minecraft:night_vision"));

    public static final PotionType LONG_NIGHT_VISION = new PotionType(NamespaceID.from("minecraft:long_night_vision"));

    public static final PotionType INVISIBILITY = new PotionType(NamespaceID.from("minecraft:invisibility"));

    public static final PotionType LONG_INVISIBILITY = new PotionType(NamespaceID.from("minecraft:long_invisibility"));

    public static final PotionType LEAPING = new PotionType(NamespaceID.from("minecraft:leaping"));

    public static final PotionType LONG_LEAPING = new PotionType(NamespaceID.from("minecraft:long_leaping"));

    public static final PotionType STRONG_LEAPING = new PotionType(NamespaceID.from("minecraft:strong_leaping"));

    public static final PotionType FIRE_RESISTANCE = new PotionType(NamespaceID.from("minecraft:fire_resistance"));

    public static final PotionType LONG_FIRE_RESISTANCE = new PotionType(NamespaceID.from("minecraft:long_fire_resistance"));

    public static final PotionType SWIFTNESS = new PotionType(NamespaceID.from("minecraft:swiftness"));

    public static final PotionType LONG_SWIFTNESS = new PotionType(NamespaceID.from("minecraft:long_swiftness"));

    public static final PotionType STRONG_SWIFTNESS = new PotionType(NamespaceID.from("minecraft:strong_swiftness"));

    public static final PotionType SLOWNESS = new PotionType(NamespaceID.from("minecraft:slowness"));

    public static final PotionType LONG_SLOWNESS = new PotionType(NamespaceID.from("minecraft:long_slowness"));

    public static final PotionType STRONG_SLOWNESS = new PotionType(NamespaceID.from("minecraft:strong_slowness"));

    public static final PotionType TURTLE_MASTER = new PotionType(NamespaceID.from("minecraft:turtle_master"));

    public static final PotionType LONG_TURTLE_MASTER = new PotionType(NamespaceID.from("minecraft:long_turtle_master"));

    public static final PotionType STRONG_TURTLE_MASTER = new PotionType(NamespaceID.from("minecraft:strong_turtle_master"));

    public static final PotionType WATER_BREATHING = new PotionType(NamespaceID.from("minecraft:water_breathing"));

    public static final PotionType LONG_WATER_BREATHING = new PotionType(NamespaceID.from("minecraft:long_water_breathing"));

    public static final PotionType HEALING = new PotionType(NamespaceID.from("minecraft:healing"));

    public static final PotionType STRONG_HEALING = new PotionType(NamespaceID.from("minecraft:strong_healing"));

    public static final PotionType HARMING = new PotionType(NamespaceID.from("minecraft:harming"));

    public static final PotionType STRONG_HARMING = new PotionType(NamespaceID.from("minecraft:strong_harming"));

    public static final PotionType POISON = new PotionType(NamespaceID.from("minecraft:poison"));

    public static final PotionType LONG_POISON = new PotionType(NamespaceID.from("minecraft:long_poison"));

    public static final PotionType STRONG_POISON = new PotionType(NamespaceID.from("minecraft:strong_poison"));

    public static final PotionType REGENERATION = new PotionType(NamespaceID.from("minecraft:regeneration"));

    public static final PotionType LONG_REGENERATION = new PotionType(NamespaceID.from("minecraft:long_regeneration"));

    public static final PotionType STRONG_REGENERATION = new PotionType(NamespaceID.from("minecraft:strong_regeneration"));

    public static final PotionType STRENGTH = new PotionType(NamespaceID.from("minecraft:strength"));

    public static final PotionType LONG_STRENGTH = new PotionType(NamespaceID.from("minecraft:long_strength"));

    public static final PotionType STRONG_STRENGTH = new PotionType(NamespaceID.from("minecraft:strong_strength"));

    public static final PotionType WEAKNESS = new PotionType(NamespaceID.from("minecraft:weakness"));

    public static final PotionType LONG_WEAKNESS = new PotionType(NamespaceID.from("minecraft:long_weakness"));

    public static final PotionType LUCK = new PotionType(NamespaceID.from("minecraft:luck"));

    public static final PotionType SLOW_FALLING = new PotionType(NamespaceID.from("minecraft:slow_falling"));

    public static final PotionType LONG_SLOW_FALLING = new PotionType(NamespaceID.from("minecraft:long_slow_falling"));

    static {
        Registry.POTION_TYPE_REGISTRY.register(EMPTY);
        Registry.POTION_TYPE_REGISTRY.register(WATER);
        Registry.POTION_TYPE_REGISTRY.register(MUNDANE);
        Registry.POTION_TYPE_REGISTRY.register(THICK);
        Registry.POTION_TYPE_REGISTRY.register(AWKWARD);
        Registry.POTION_TYPE_REGISTRY.register(NIGHT_VISION);
        Registry.POTION_TYPE_REGISTRY.register(LONG_NIGHT_VISION);
        Registry.POTION_TYPE_REGISTRY.register(INVISIBILITY);
        Registry.POTION_TYPE_REGISTRY.register(LONG_INVISIBILITY);
        Registry.POTION_TYPE_REGISTRY.register(LEAPING);
        Registry.POTION_TYPE_REGISTRY.register(LONG_LEAPING);
        Registry.POTION_TYPE_REGISTRY.register(STRONG_LEAPING);
        Registry.POTION_TYPE_REGISTRY.register(FIRE_RESISTANCE);
        Registry.POTION_TYPE_REGISTRY.register(LONG_FIRE_RESISTANCE);
        Registry.POTION_TYPE_REGISTRY.register(SWIFTNESS);
        Registry.POTION_TYPE_REGISTRY.register(LONG_SWIFTNESS);
        Registry.POTION_TYPE_REGISTRY.register(STRONG_SWIFTNESS);
        Registry.POTION_TYPE_REGISTRY.register(SLOWNESS);
        Registry.POTION_TYPE_REGISTRY.register(LONG_SLOWNESS);
        Registry.POTION_TYPE_REGISTRY.register(STRONG_SLOWNESS);
        Registry.POTION_TYPE_REGISTRY.register(TURTLE_MASTER);
        Registry.POTION_TYPE_REGISTRY.register(LONG_TURTLE_MASTER);
        Registry.POTION_TYPE_REGISTRY.register(STRONG_TURTLE_MASTER);
        Registry.POTION_TYPE_REGISTRY.register(WATER_BREATHING);
        Registry.POTION_TYPE_REGISTRY.register(LONG_WATER_BREATHING);
        Registry.POTION_TYPE_REGISTRY.register(HEALING);
        Registry.POTION_TYPE_REGISTRY.register(STRONG_HEALING);
        Registry.POTION_TYPE_REGISTRY.register(HARMING);
        Registry.POTION_TYPE_REGISTRY.register(STRONG_HARMING);
        Registry.POTION_TYPE_REGISTRY.register(POISON);
        Registry.POTION_TYPE_REGISTRY.register(LONG_POISON);
        Registry.POTION_TYPE_REGISTRY.register(STRONG_POISON);
        Registry.POTION_TYPE_REGISTRY.register(REGENERATION);
        Registry.POTION_TYPE_REGISTRY.register(LONG_REGENERATION);
        Registry.POTION_TYPE_REGISTRY.register(STRONG_REGENERATION);
        Registry.POTION_TYPE_REGISTRY.register(STRENGTH);
        Registry.POTION_TYPE_REGISTRY.register(LONG_STRENGTH);
        Registry.POTION_TYPE_REGISTRY.register(STRONG_STRENGTH);
        Registry.POTION_TYPE_REGISTRY.register(WEAKNESS);
        Registry.POTION_TYPE_REGISTRY.register(LONG_WEAKNESS);
        Registry.POTION_TYPE_REGISTRY.register(LUCK);
        Registry.POTION_TYPE_REGISTRY.register(SLOW_FALLING);
        Registry.POTION_TYPE_REGISTRY.register(LONG_SLOW_FALLING);
    }

    @NotNull
    private final NamespaceID id;

    protected PotionType(@NotNull NamespaceID id) {
        this.id = id;
    }

    @Override
    @NotNull
    public Key key() {
        return this.id;
    }

    @NotNull
    public NamespaceID getId() {
        return this.id;
    }

    @NotNull
    public static PotionType fromId(Key id) {
        return Registry.POTION_TYPE_REGISTRY.get(id);
    }

    @NotNull
    @Override
    public String toString() {
        return "[" + this.id + "]";
    }

    @NotNull
    public static List<PotionType> values() {
        return Registry.POTION_TYPE_REGISTRY.values();
    }
}

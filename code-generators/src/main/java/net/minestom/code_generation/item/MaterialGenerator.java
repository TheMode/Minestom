package net.minestom.code_generation.item;

import com.google.gson.*;
import com.google.gson.stream.JsonReader;
import com.squareup.javapoet.*;
import net.minestom.code_generation.MinestomCodeGenerator;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.lang.model.element.Modifier;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.Collections;
import java.util.List;

public final class MaterialGenerator extends MinestomCodeGenerator {
    private static final Logger LOGGER = LoggerFactory.getLogger(MaterialGenerator.class);
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().disableHtmlEscaping().create();
    private final File itemsFile;
    private final File outputFolder;

    public MaterialGenerator(@NotNull File itemsFile, @NotNull File outputFolder) {
        this.itemsFile = itemsFile;
        this.outputFolder = outputFolder;
    }

    @Override
    public void generate() {
        if (!itemsFile.exists()) {
            LOGGER.error("Failed to find items.json.");
            LOGGER.error("Stopped code generation for items.");
            return;
        }
        if (!outputFolder.exists() && !outputFolder.mkdirs()) {
            LOGGER.error("Output folder for code generation does not exist and could not be created.");
            return;
        }
        // Important classes we use alot
        ClassName namespaceIDClassName = ClassName.get("net.minestom.server.utils", "NamespaceID");
        ClassName rawMaterialDataClassName = ClassName.get("net.minestom.server.raw_data", "RawMaterialData");
        ClassName registryClassName = ClassName.get("net.minestom.server.registry", "Registry");

        JsonArray items;
        try {
            items = GSON.fromJson(new JsonReader(new FileReader(itemsFile)), JsonArray.class);
        } catch (FileNotFoundException e) {
            LOGGER.error("Failed to find items.json.");
            LOGGER.error("Stopped code generation for items.");
            return;
        }
        ClassName itemClassName = ClassName.get("net.minestom.server.item", "Material");

        // Item
        TypeSpec.Builder itemClass = TypeSpec.classBuilder(itemClassName)
                .addSuperinterface(ClassName.get("net.kyori.adventure.key", "Keyed"))
                .addModifiers(Modifier.PUBLIC).addJavadoc("AUTOGENERATED by " + getClass().getSimpleName());
        itemClass.addField(
                FieldSpec.builder(namespaceIDClassName, "id")
                        .addModifiers(Modifier.PRIVATE, Modifier.FINAL).addAnnotation(NotNull.class).build()
        );
        itemClass.addField(
                FieldSpec.builder(TypeName.BYTE, "maxDefaultStackSize")
                        .addModifiers(Modifier.PRIVATE, Modifier.FINAL).build()
        );
        itemClass.addField(
                FieldSpec.builder(rawMaterialDataClassName, "materialData")
                        .addModifiers(Modifier.PRIVATE, Modifier.VOLATILE)
                        .addAnnotation(NotNull.class)
                        .build()
        );
        itemClass.addMethod(
                MethodSpec.constructorBuilder()
                        .addParameter(ParameterSpec.builder(namespaceIDClassName, "id").addAnnotation(NotNull.class).build())
                        .addParameter(TypeName.BYTE, "maxDefaultStackSize")
                        .addParameter(ParameterSpec.builder(rawMaterialDataClassName, "materialData").addAnnotation(NotNull.class).build())
                        .addStatement("this.id = id")
                        .addStatement("this.maxDefaultStackSize = maxDefaultStackSize")
                        .addStatement("this.materialData = materialData")
                        .addModifiers(Modifier.PROTECTED)
                        .build()
        );
        // Override key method (adventure)
        itemClass.addMethod(
                MethodSpec.methodBuilder("key")
                        .returns(ClassName.get("net.kyori.adventure.key", "Key"))
                        .addAnnotation(Override.class)
                        .addAnnotation(NotNull.class)
                        .addStatement("return this.id")
                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );
        // getId method
        itemClass.addMethod(
                MethodSpec.methodBuilder("getId")
                        .returns(namespaceIDClassName)
                        .addAnnotation(NotNull.class)
                        .addStatement("return this.id")
                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );
        // getName method
        itemClass.addMethod(
                MethodSpec.methodBuilder("getName")
                        .addAnnotation(NotNull.class)
                        .returns(ClassName.get(String.class))
                        .addStatement("return this.id.asString()")
                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );
        // getNumericalId
        itemClass.addMethod(
                MethodSpec.methodBuilder("getNumericalId")
                        .returns(TypeName.INT)
                        .addStatement("return $T.MATERIAL_REGISTRY.getId(this)", registryClassName)
                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );
        // getMaxDefaultStackSize
        itemClass.addMethod(
                MethodSpec.methodBuilder("getMaxDefaultStackSize")
                        .returns(TypeName.BYTE)
                        .addStatement("return this.maxDefaultStackSize")
                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );
        // fromId Method
        itemClass.addMethod(
                MethodSpec.methodBuilder("fromId")
                        .returns(itemClassName)
                        .addAnnotation(NotNull.class)
                        .addParameter(TypeName.INT, "id")
                        .addStatement("return $T.MATERIAL_REGISTRY.get((short) id)", registryClassName)
                        .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                        .build()
        );
        // fromId Method
        itemClass.addMethod(
                MethodSpec.methodBuilder("fromId")
                        .returns(itemClassName)
                        .addAnnotation(NotNull.class)
                        .addParameter(ClassName.get("net.kyori.adventure.key", "Key"), "id")
                        .addStatement("return $T.MATERIAL_REGISTRY.get(id)", registryClassName)
                        .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                        .build()
        );
        // getMaterialData method
        itemClass.addMethod(
                MethodSpec.methodBuilder("getMaterialData")
                        .returns(rawMaterialDataClassName)
                        .addAnnotation(NotNull.class)
                        .addStatement("return this.materialData")
                        .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
                        .build()
        );
        // setMaterialData method
        itemClass.addMethod(
                MethodSpec.methodBuilder("setMaterialData")
                        .addParameter(ParameterSpec.builder(rawMaterialDataClassName, "materialData").addAnnotation(NotNull.class).build())
                        .addStatement("this.materialData = materialData")
                        .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
                        .build()
        );
        // isFood method
        itemClass.addMethod(
                MethodSpec.methodBuilder("isFood")
                        .returns(TypeName.BOOLEAN)
                        .addStatement("return this.materialData.isEdible()")
                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );
        // hasState method
        itemClass.addMethod(
                MethodSpec.methodBuilder("hasState")
                        .returns(TypeName.BOOLEAN)
                        .beginControlFlow("if (this == BOW || this == TRIDENT || this == CROSSBOW || this == SHIELD)")
                        .addStatement("return true")
                        .nextControlFlow("else")
                        .addStatement("return isFood()")
                        .endControlFlow()
                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );
        // isBlock method
        itemClass.addMethod(
                MethodSpec.methodBuilder("isBlock")
                        .returns(TypeName.BOOLEAN)
                        .addStatement(
                                "return this.materialData.getBlock() != $T.AIR",
                                ClassName.get("net.minestom.server.instance.block", "Block")
                        )
                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );
        // isArmor method
        itemClass.addMethod(
                MethodSpec.methodBuilder("isArmor")
                        .returns(TypeName.BOOLEAN)
                        .addStatement("return this.materialData.getArmorData() != null")
                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );
        // isHelmet method
        itemClass.addMethod(
                MethodSpec.methodBuilder("isHelmet")
                        .returns(TypeName.BOOLEAN)
                        .addStatement(
                                "return this.isArmor() && this.materialData.getArmorData().getSlot() == $T.HELMET",
                                ClassName.get("net.minestom.server.entity", "EquipmentSlot")
                        )
                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );
        // isChestplate method
        itemClass.addMethod(
                MethodSpec.methodBuilder("isChestplate")
                        .returns(TypeName.BOOLEAN)
                        .addStatement(
                                "return this.isArmor() && this.materialData.getArmorData().getSlot() == $T.CHESTPLATE",
                                ClassName.get("net.minestom.server.entity", "EquipmentSlot")
                        )
                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );
        // isLeggings method
        itemClass.addMethod(
                MethodSpec.methodBuilder("isLeggings")
                        .returns(TypeName.BOOLEAN)
                        .addStatement(
                                "return this.isArmor() && this.materialData.getArmorData().getSlot() == $T.LEGGINGS",
                                ClassName.get("net.minestom.server.entity", "EquipmentSlot")
                        )
                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );
        // isBoots method
        itemClass.addMethod(
                MethodSpec.methodBuilder("isBoots")
                        .returns(TypeName.BOOLEAN)
                        .addStatement(
                                "return this.isArmor() && this.materialData.getArmorData().getSlot() == $T.BOOTS",
                                ClassName.get("net.minestom.server.entity", "EquipmentSlot")
                        )
                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );
        // getBlock method
        itemClass.addMethod(
                MethodSpec.methodBuilder("getBlock")
                        .addAnnotation(NotNull.class)
                        .returns(ClassName.get("net.minestom.server.instance.block", "Block"))
                        .addStatement("return this.materialData.getBlock()")
                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );
        // toString method
        itemClass.addMethod(
                MethodSpec.methodBuilder("toString")
                        .addAnnotation(NotNull.class)
                        .addAnnotation(Override.class)
                        .returns(String.class)
                        // this resolves to [Namespace]
                        .addStatement("return \"[\" + this.id + \"]\"")
                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );
        // values method
        itemClass.addMethod(
                MethodSpec.methodBuilder("values")
                        .addAnnotation(NotNull.class)
                        .returns(ParameterizedTypeName.get(ClassName.get(List.class), itemClassName))
                        .addStatement("return $T.MATERIAL_REGISTRY.values()", registryClassName)
                        .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                        .build()
        );

        CodeBlock.Builder staticBlock = CodeBlock.builder();
        // Use data
        for (JsonElement i : items) {
            JsonObject item = i.getAsJsonObject();

            String itemName = item.get("name").getAsString();
            if (item.get("armorProperties") != null) {
                JsonObject armor = item.get("armorProperties").getAsJsonObject();

                String slot;
                // set correct slot
                switch (armor.get("slot").getAsString().toUpperCase()) {
                    case "HEAD": {
                        slot = "HELMET";
                        break;
                    }
                    case "CHEST": {
                        slot = "CHESTPLATE";
                        break;
                    }
                    case "LEGS": {
                        slot = "LEGGINGS";
                        break;
                    }
                    case "FEET": {
                        slot = "BOOTS";
                        break;
                    }
                    default: {
                        slot = "MAIN_HAND";
                        break;
                    }
                }
                itemClass.addField(
                        FieldSpec.builder(
                                itemClassName,
                                itemName
                        ).initializer(
                                "new $T($T.from($S), (byte) $L, new $T($L, $L, $L, $L, () -> $T.REGISTRY.fromNamespaceId($T.from($S)), () -> $T.SOUND_EVENT_REGISTRY.get($S), () -> $T.SOUND_EVENT_REGISTRY.get($S), new $T($L, $L, $T.$N)))",
                                itemClassName,
                                namespaceIDClassName,
                                item.get("id").getAsString(),
                                item.get("maxStackSize").getAsInt(),

                                rawMaterialDataClassName,
                                item.get("depletes").getAsBoolean(),
                                item.get("maxDamage").getAsInt(),
                                item.get("edible").getAsBoolean(),
                                item.get("fireResistant").getAsBoolean(),

                                ClassName.get("net.minestom.server.instance.block", "Block"),
                                namespaceIDClassName,
                                item.get("blockId").getAsString(),

                                registryClassName,
                                item.get("eatingSound").getAsString(),
                                registryClassName,
                                item.get("drinkingSound").getAsString(),
                                ClassName.get("net.minestom.server.raw_data", "RawMaterialData", "RawArmorData"),
                                armor.get("defense").getAsInt(),
                                armor.get("toughness").getAsDouble(),
                                ClassName.get("net.minestom.server.entity", "EquipmentSlot"),
                                slot
                        ).addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL).build()
                );
            } else {
                itemClass.addField(
                        FieldSpec.builder(
                                itemClassName,
                                itemName
                        ).initializer(
                                "new $T($T.from($S), (byte) $L, new $T($L, $L, $L, $L, () -> $T.REGISTRY.fromNamespaceId($T.from($S)), () -> $T.SOUND_EVENT_REGISTRY.get($S),() -> $T.SOUND_EVENT_REGISTRY.get($S), null))",
                                itemClassName,
                                namespaceIDClassName,
                                item.get("id").getAsString(),
                                item.get("maxStackSize").getAsInt(),

                                rawMaterialDataClassName,
                                item.get("depletes").getAsBoolean(),
                                item.get("maxDamage").getAsInt(),
                                item.get("edible").getAsBoolean(),
                                item.get("fireResistant").getAsBoolean(),

                                ClassName.get("net.minestom.server.instance.block", "Block"),
                                namespaceIDClassName,
                                item.get("blockId").getAsString(),

                                registryClassName,
                                item.get("eatingSound").getAsString(),
                                registryClassName,
                                item.get("drinkingSound").getAsString()

                        ).addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL).build()
                );
            }


            // Add to static init.
            staticBlock.addStatement("$T.MATERIAL_REGISTRY.register($N)", registryClassName, itemName);
        }

        itemClass.addStaticBlock(staticBlock.build());

        // Write files to outputFolder
        writeFiles(
                Collections.singletonList(
                        JavaFile.builder("net.minestom.server.item", itemClass.build())
                                .indent("    ")
                                .skipJavaLangImports(true)
                                .build()
                ),
                outputFolder
        );
    }
}
